import time
import random
from vk_api import VkUpload
from datetime import datetime
from modules.stats import Stats
from vk_api.utils import get_random_id

class MessageNew():
    def __init__(self, session, vk_session, vk, event):
        speech_dict = {
            "hello":{"question": "–ø—Ä–∏–≤–µ—Ç", "answer": "–ü–æ—à–æ–ª —Ç—ã –Ω–∞—Ö—É–π"},
            "thx":{"question": "—Å–ø–∞—Å–∏–±–æ", "answer": "–ü–æ—à–æ–ª —Ç—ã –Ω–∞—Ö—É–π"},
            "flat":{"question": "–Ω–∞ —Ñ–ª—ç—Ç–µ?", "answer": "–ù–ê –§–õ–≠–¢–ï –ù–ê–•–£–£–£–£–£–ô ü§ô"},
            "rain":{"question": "–ª–∏–≤–Ω—è?", "answer": "–î–æ–ª–±–æ–µ–±"},
            "pray":{"question": "–ø–æ–º–æ–ª–∏–º—Å—è", "answer": "video67219698_456244596"},
            "understand?":{"question": "–ø–æ–Ω–∏–º–∞–µ—à—å?", "answer": "photo-73935802_457240008"},
            "understand":{"question": "–ø–æ–Ω–∏–º–∞—é", "answer": "photo-73935802_457240008"},
            "you":{"question": "—Ç—ã", "answer": "–ü–∏–¥–æ—Ä"},
            "yes":{"question": "–¥–∞", "answer": "–ü–∏–∑–¥–∞"},
            "yes?":{"question": "–¥–∞?", "answer": "–ü–∏–∑–¥–∞"},
            "gn":{"question": "—Å–ø–æ–∫", "answer": "–°–ø–æ–∫!"},
            "aight":{"question": "–ª–∞–¥–Ω–æ", "answer": "–®–æ–∫–æ–ª–∞–¥–Ω–æ, –±–ª—è"},
            "crazy":{"question": "–µ–±–∞–Ω—É—Ç—ã–π", "answer": "photo-73935802_457240009"},
            "popeye":{"question": "–ø–æ–ø–∞—è–Ω–Ω—ã–π", "answer": "photo-73935802_457240009"},
            "su":{"question": "–∑–∞–∫—Ä–æ–π —Ä–æ—Ç", "answer": "–õ–∞–Ω"},
            "stfu":{"question": "–∑–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ", "answer": "–õ–∞–Ω"}
        }

        support_dict = {
            "/—Å—Ç–∞—Ç—ã - –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
            "/–ø–µ—Ä–µ—à–ª–∏ + [–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] - –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        }

        #–º–æ–∂–Ω–æ –∑–∞–ø–∏–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ —à–∞–Ω—Å–∞ –æ—Ç–≤–µ—Ç–∞
        
        for key, value in speech_dict.items():
            if event.obj.message["text"].lower() == value["question"]:
                if random.randint(0, 3) == 1:
                    self.speech(value, vk, event)

        if event.obj.message["text"].lower() == "/–ø–µ—Ä–µ—à–ª–∏":
            if random.randint(0, 3) == 1:
                vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
                            message="–ü–æ—à—ë–ª –Ω–∞—Ö—É–π!")

                time.sleep(3)

                vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
                            message="–¢–∞ –ª–∞–Ω)")
                self.forward(session, vk_session, vk, event)
            else:
                self.forward(session, vk_session, vk, event)

        if event.obj.message["text"].lower() == "/—Å—Ç–∞—Ç—ã":
            self.stats(vk, event, vk_session)

        if event.obj.message['text'].lower() == '/–ø–æ–º–æ—â—å' or event.obj.message['text'].lower() == '/—Ö–µ–ª–ø':
            self.support(support_dict, vk, event)

    def speech(self, value, vk, event):
        if "video" in value["answer"] or "photo" in value["answer"]:
            message_attach = value["answer"]
            message_text = ""
        else:
            message_attach = ""
            message_text = value["answer"]

        vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
                        message=message_text, attachment=message_attach)
    
    def forward(self, session, vk_session, vk, event):
        try:
            upload = VkUpload(vk_session)
            lastUrl = len(event.obj.message["attachments"][0]["photo"]["sizes"]) - 1
            sunLink = event.obj.message["attachments"][0]["photo"]["sizes"][lastUrl]["url"]
            image = session.get(sunLink, stream=True)
            photo = upload.photo_messages(photos=image.raw)[0]
            attachment = "photo{}_{}".format(photo["owner_id"], photo["id"])
                    
            vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"], 
                            message="–î–µ—Ä–∂–∏, –±—Ä–∞—Ç", attachment=f"{attachment}")
        except IndexError:
            vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
                            message="–ü—Ä–∏–∫—Ä–µ–ø–∏ –ø–∏–∫—á—É, –æ–ø–µ–∑–¥–∞–ª")
        except KeyError:
            vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
                            message="–ù–∞—Ö—É–π —Ç—ã –Ω–µ –ø–∏–∫—á—É –ø—Ä–∏–∫—Ä–µ–ø–∏–ª?")

    def stats(self, vk, event, vk_session):
        now = datetime.now()
        now = int(now.strftime("%d%m%Y"))
        
        count_raw = vk.messages.search(peer_id=event.obj.message["peer_id"], date=now, q="")

        #–Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç—ã –∏ —É–∑–Ω–∞—Ç—å, —Ä–µ–∞–ª—å–Ω–æ–µ –ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        count = (count_raw["count"])
        
        vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
            message="–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {}".format(count))

        vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
            message="–©—è –ø–æ–¥–≤–µ–∑—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—É")
        
        vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
            message="–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è —Å—á–∏—Ç–∞—Ç—å...")
        
        try:
            Stats(vk, event).main(vk, event, vk_session)
        except:
            vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.message["peer_id"],
                            message="–•—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ —Å–ª—É—á–∏–ª–∞—Å—å, —Ç–∞–∫ —à–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è")

    def support(self, support_dict, vk, event):
        support_dict = "\n \n üîµ ".join(support_dict)

        vk.messages.send(random_id=get_random_id(), chat_id=event.chat_id, peer_id=event.obj.peer_id,
                    message="–®–û –ë–û–¢–Ø–†–ê –ú–û–ñ–ï üêó: \n \n üîµ {}".format(support_dict))